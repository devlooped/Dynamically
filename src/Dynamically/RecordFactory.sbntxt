{{~ 
func getValue(x)
   if x.Factory
      ret x.Factory + "(value." + x.Name + ")" + x.Convert
   else
      ret "value." + x.Name
   end
end
~}}
// <auto-generated />
{{~ for alias in Aliases ~}}
extern alias {{ alias }};
{{~ end ~}}
using System;
using System.Collections.Generic;
using Microsoft.CSharp.RuntimeBinder;

namespace _Dynamically.{{ Namespace }}
{
    static partial class {{ FactoryName }}
    {
        public static {{ TypeFullName }} Create(dynamic value)
        {
            if (value is null)
                throw new ArgumentNullException(nameof(value));

            try
            {
                {{~ if Factory ~}}
                return {{ Factory }}(value);
                {{~ else ~}}
                return new {{ TypeFullName }}({{ Parameters | array.each @getValue | array.join ', ' }}){{~ if !HasProperties ~}};{{~ end }}
                {{~ if HasProperties ~}}
                {
                    {{~ for prop in Properties ~}}
                    {{ prop.Name }} = {{ getValue prop }},
                    {{~ end ~}}
                };
                {{~ end ~}}
                {{~ end ~}}
            }
            catch (RuntimeBinderException e)
            {
                var valueAsm = ((object)value).GetType().Assembly.GetName();
                var thisAsm = typeof({{ FactoryName }}).Assembly.GetName();
                throw new ArgumentException(
                    $"Incompatible {nameof({{ TypeFullName }})} value. Cannot convert value from '{valueAsm.Name}, Version={valueAsm.Version}' to '{thisAsm.Name}, Version={thisAsm.Version}'.",
                    nameof(value), e);
            }
        }

        public static List<{{ TypeFullName }}> CreateMany(dynamic value)
        {
            var result = new List<{{ TypeFullName }}>();
            foreach (var item in value)
            {
                result.Add(Create(item));
            }
            return result;
        }
    }
}